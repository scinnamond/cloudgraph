package us.fed.fs.bao.appinv.data.loader;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.UnmarshalException;

import org.apache.log4j.Logger;
import org.servicelabs.plasma.common.bind.DefaultValidationEventHandler;
import org.servicelabs.plasma.query.PlasmaQueryDataBinding;
import org.servicelabs.plasma.query.Query;
import org.servicelabs.plasma.sdo.PlasmaDataGraph;
import org.servicelabs.plasma.sdo.PlasmaDataObject;
import org.servicelabs.plasma.sdo.access.client.SDODataAccessClient;
import org.servicelabs.plasma.sdo.helper.PlasmaTypeHelper;
import org.xml.sax.SAXException;

import us.fed.fs.bao.appinv.data.bind.ProjectDataBinding;
import us.fed.fs.bao.appinv.data.invest.project.LifecycleStatus;
import us.fed.fs.bao.appinv.data.loader.query.ApplicationQuery;
import us.fed.fs.bao.appinv.data.loader.query.CategoryQuery;
import us.fed.fs.bao.appinv.data.loader.query.FiscalQuarterQuery;
import us.fed.fs.bao.appinv.data.loader.query.FiscalYearQuery;
import us.fed.fs.bao.appinv.data.loader.query.InvestmentQuery;
import us.fed.fs.bao.appinv.data.loader.query.OrganizationQuery;
import us.fed.fs.bao.appinv.data.loader.query.ProgramCodeQuery;
import us.fed.fs.bao.appinv.data.loader.query.ProjectQuery;
import us.fed.fs.bao.appinv.data.loader.query.SegmentNameQuery;
import us.fed.fs.bao.appinv.sdo.application.Application;
import us.fed.fs.bao.appinv.sdo.core.Organization;
import us.fed.fs.bao.appinv.sdo.cost.Cost;
import us.fed.fs.bao.appinv.sdo.cost.CostCategorization;
import us.fed.fs.bao.appinv.sdo.cost.FiscalYearCost;
import us.fed.fs.bao.appinv.sdo.invest.Investment;
import us.fed.fs.bao.appinv.sdo.segment.Segment;
import us.fed.fs.bao.appinv.sdo.segment.SegmentName;
import us.fed.fs.bao.appinv.sdo.project.BenefitAmount;
import us.fed.fs.bao.appinv.sdo.project.BusinessCase;
import us.fed.fs.bao.appinv.sdo.project.Deliverable;
import us.fed.fs.bao.appinv.sdo.project.DeliverableComponent;
import us.fed.fs.bao.appinv.sdo.project.DeliverableComponentType;
import us.fed.fs.bao.appinv.sdo.project.Milestone;
import us.fed.fs.bao.appinv.sdo.project.ProgramCode;
import us.fed.fs.bao.appinv.sdo.project.Project;
import us.fed.fs.bao.appinv.sdo.project.ProjectBenefit;
import us.fed.fs.bao.appinv.sdo.project.ProjectCategorization;
import us.fed.fs.bao.appinv.sdo.project.ProjectCost;
import us.fed.fs.bao.appinv.sdo.project.ProjectElement;
import us.fed.fs.bao.appinv.sdo.project.ProjectFunding;
import us.fed.fs.bao.appinv.sdo.project.ProjectFundingAmount;
import us.fed.fs.bao.appinv.sdo.project.ProjectFundingMinimumAmount;
import us.fed.fs.bao.appinv.sdo.project.ProjectLifecycleCost;
import us.fed.fs.bao.appinv.sdo.project.ProjectPlan;
import us.fed.fs.bao.appinv.sdo.project.ProjectSecurity;
import us.fed.fs.bao.appinv.sdo.project.SecurityAmount;
import us.fed.fs.bao.appinv.sdo.ref.FiscalQuarter;
import us.fed.fs.bao.appinv.sdo.ref.FiscalYear;
import us.fed.fs.bao.appinv.sdo.taxonomy.Categorization;
import us.fed.fs.bao.appinv.sdo.taxonomy.CategorizationNote;
import us.fed.fs.bao.appinv.sdo.taxonomy.CategorizationWeight;
import us.fed.fs.bao.appinv.sdo.taxonomy.Category;

import commonj.sdo.DataGraph;
import commonj.sdo.Type;

public abstract class ProjectLoader extends AbstractLoader 
    implements Loader 
{
    private static Logger log = Logger.getLogger(ProjectLoader.class);
    protected SDODataAccessClient service;
    protected us.fed.fs.bao.appinv.data.invest.project.IRProject xmlProject;

	public ProjectLoader() {
		service = new SDODataAccessClient();
	}
	
	public abstract LifecycleStatus getStatusCode();	
	public abstract String getRevisionName();
	public abstract String getRevisionDescription();
	public abstract int getRevisionSeqNum();
	public abstract String getCategoryName();
	public abstract int getCategoryId();
	
	public void load(File file) {
		xmlProject = unmarshal(file);
		if (xmlProject.getLifecycleStatus() == null) {
			log.info("ignoring (no lifecycle status): " + file.getName());
			return;
		}
		if (this.getStatusCode().ordinal() != xmlProject.getLifecycleStatus().ordinal()) {
			log.info("expected lifecycle status '" +this.getStatusCode()
					+ "' not '"+xmlProject.getLifecycleStatus()+"' - ignoring: " 
					+ file.getName());
			return;
		}

		log.info("loading: " + file.getName());
		
		Query query = ProjectQuery.createProjectQuery(xmlProject);
		
		log.debug("fetching project");
		Project project = findProject(query);
		if (project != null) {	
			project = findProject(us.fed.fs.bao.appinv.web.query.ProjectQuery.createEditQueryById(
					project.getSeqId()));
			log.debug("project found: merging XML with existing project");
			//log.info(((PlasmaDataObject)project).dump());
			createRevision(project.getSegment());
			service.commit(project.getDataGraph(), xmlProject.getCreatedByName()); // simulate a user performing this (yes a hack but users will gripe otherwise)
			//mergeProject(project);
			//service.commit(project.getDataGraph(), xmlProject.getCreatedByName());
		}
		else {
			log.debug("creating new project");
			project = createProject();
			log.debug(((PlasmaDataObject)project).dump());
			service.commit(project.getDataGraph(), xmlProject.getCreatedByName());
		}
	}
	
	private Project createProject() { 
		PlasmaDataGraph dataGraph = new PlasmaDataGraph();
		dataGraph.getChangeSummary().beginLogging(); // log changes from this point
            	
    	Type rootType = PlasmaTypeHelper.INSTANCE.getType(Project.class);
    	
    	Project project = (Project)dataGraph.createRootObject(rootType); 
    	LoaderUtils.copy(project, xmlProject);

    	ProjectElement projectElement = project.createProjectElement(); 
    	ProjectCategorization projectCategorization = projectElement.createProjectCategorization();
    	Categorization catz = projectCategorization.createCategorization();
    	catz.setCategory(getCategory(this.getCategoryName(), this.getCategoryId()));
    	
    	project.setRevisionSequenceNum(this.getRevisionSeqNum());
    	project.setRevisionName("revision-" + this.getRevisionSeqNum());
    	
    	Segment segment = project.createSegment();
    	segment.setName(xmlProject.getName().trim());
    	segment.setInvestmentType(xmlProject.getInvestmentType().name());
				
    	segment.setInvestment(getInvestment());
    	segment.setApplication(getApplication());
    	segment.setSegmentName(getSegmentName());
    	segment.setSponsor(getSponsorOrganization());
    	segment.setBudgetYear(getBudgetFiscalYear());
    	segment.setCurrentRevisionSequenceNum(this.getRevisionSeqNum());
		
		//createProjectBusinessCases(project);
		createProjectCosts(project);
		createProjectCategorizations(project);
		createProjectFunding(project);
		createProjectSecurity(project);
		createProjectBenefit(project);
		
		if (xmlProject.getProjectPlan() != null && xmlProject.getProjectPlan().size() > 0) {
			ProjectPlan projectPlan = project.createProjectPlan();	
			createProjectDeliverables(projectPlan, project);
			createProjectMilestones(projectPlan, project);
		}
		
    	return project;
	}	

	private Project createRevision(Segment segment) { 
    	
    	Project project = segment.createProject(); 
    	LoaderUtils.copy(project, xmlProject);

    	ProjectElement projectElement = project.createProjectElement(); 
    	ProjectCategorization projectCategorization = projectElement.createProjectCategorization();
    	Categorization catz = projectCategorization.createCategorization();
    	catz.setCategory(getCategory(this.getCategoryName(), this.getCategoryId()));

    	project.setRevisionSequenceNum(this.getRevisionSeqNum());
    	project.setRevisionName("revision-" + this.getRevisionSeqNum());
    	segment.setCurrentRevisionSequenceNum(this.getRevisionSeqNum());
		
		//createProjectBusinessCases(project);
		createProjectCosts(project);
		createProjectCategorizations(project);
		createProjectFunding(project);
		createProjectSecurity(project);
		createProjectBenefit(project);
		
		if (xmlProject.getProjectPlan() != null && xmlProject.getProjectPlan().size() > 0) {
			ProjectPlan projectPlan = project.createProjectPlan();	
			createProjectDeliverables(projectPlan, project);
			createProjectMilestones(projectPlan, project);
		}
		
    	return project;
	}	
	private void mergeProject(Project project) {
		mergeProjectCosts(project.getProjectCost(0), project);		
		mergeProjectBenefit(project.getProjectBenefit(0), project);
		mergeProjectSecurity(project.getProjectSecurity(0), project);
		mergeProjectFunding(project.getProjectFunding(0), project);
		mergeProjectCategorizations(project);
	}	
	
	private void mergeProjectCosts(ProjectCost projectCost, Project project)
	{
		// zero out existing costs not found in XML
		if (projectCost.getProjectLifecycleCost() != null)
			for (ProjectLifecycleCost plc : projectCost.getProjectLifecycleCost()) {
				if (plc.getFiscalYearCost() != null)
					for (FiscalYearCost fyc : plc.getFiscalYearCost()) {
						if (fyc.getCost() != null)
							for (Cost cost : fyc.getCost()) {
								us.fed.fs.bao.appinv.data.invest.project.Cost xmlCost = findXmlCost(plc.getCostType(), 
										fyc.getFiscalYear().getYear(), fyc.getFiscalYearType(),
										cost.getCostCategorization(0).getCategorization().getCategory().getId(), 
										cost.getCostCategorization(0).getCategorization().getCategory().getParent().getId());
								if (xmlCost == null)
									cost.setQuantity(222);
							}
					}
			}

		
		// merge with existing or create new costs
		for (us.fed.fs.bao.appinv.data.invest.project.IRProjectLifecycleCost xmlPlc : xmlProject.getIRProjectCost().get(0).getIRProjectLifecycleCost())
		{
			for (us.fed.fs.bao.appinv.data.invest.project.FiscalYearCost xmlFyc : xmlPlc.getFiscalYearCost()) {
				for (us.fed.fs.bao.appinv.data.invest.project.Cost xmlCost : xmlFyc.getCost()) {
					Category cat = getCategory(xmlCost.getCostCategory().get(0).getCategory());
					
					// debugging hook
					if (xmlFyc.getFiscalYear().getYear() == 2013 && "A".equals(xmlFyc.getFiscalYearType().value())
							&& cat.getId() == 1699) {
						int fuckme = 0;
						fuckme++;
					}					
					
					Cost existingCost = findCost(projectCost, 
							xmlPlc.getCostType().value(), 
							xmlFyc.getFiscalYear().getYear(),
							xmlFyc.getFiscalYearType().value(),
							cat);
					if (existingCost != null) {
					    LoaderUtils.merge(existingCost, xmlCost);
					    Categorization catz = existingCost.getCostCategorization(0).getCategorization();
					    if (catz.getCategory().getSeqId() != cat.getSeqId())
					    	catz.setCategory(cat);
					} else {
						FiscalYearCost fyc = findFiscalYearCost(projectCost, 
								xmlPlc.getCostType().value(), 
								xmlFyc.getFiscalYear().getYear(),
								xmlFyc.getFiscalYearType().value());
						if (fyc == null) {
							ProjectLifecycleCost plc = findProjectLifecycleCost(projectCost, 
									xmlPlc.getCostType().value());
							if (plc == null) {
								plc = projectCost.createProjectLifecycleCost();
								LoaderUtils.copy(plc, xmlPlc);
							}		
							fyc = plc.createFiscalYearCost();
							fyc.setFiscalYear(this.getFiscalYear(xmlFyc.getFiscalYear().getYear()));
							LoaderUtils.copy(fyc, xmlFyc);
						}	
						Cost cost = fyc.createCost();
						LoaderUtils.copy(cost, xmlCost);
						CostCategorization costCat = cost.createCostCategorization();
						Categorization catz = costCat.createCategorization();
						catz.setCategory(cat);
					}
				}
			}
		}		
	}
	
	private us.fed.fs.bao.appinv.data.invest.project.Cost findXmlCost(String costType, int fiscalYear, String fiscalYearType,
			int categoryId, int parentCategoryId) {
		for (us.fed.fs.bao.appinv.data.invest.project.IRProjectLifecycleCost xmlPlc : xmlProject.getIRProjectCost().get(0).getIRProjectLifecycleCost())
		{
			if (!xmlPlc.getCostType().value().equals(costType))
				continue;
			for (us.fed.fs.bao.appinv.data.invest.project.FiscalYearCost xmlFyc : xmlPlc.getFiscalYearCost()) {
				if (xmlFyc.getFiscalYear().getYear() != fiscalYear || !xmlFyc.getFiscalYearType().value().equals(fiscalYearType))
					continue;
				for (us.fed.fs.bao.appinv.data.invest.project.Cost xmlCost : xmlFyc.getCost()) {
					if (xmlCost.getCostCategory().get(0).getCategory().getId() == categoryId ||
							xmlCost.getCostCategory().get(0).getCategory().getParent().getId() == parentCategoryId) {
						return xmlCost;
					}
						
				}	
			}
		}
		log.info("no xml cost for costType=" + costType + ", fiscalYear=" + fiscalYear + ", fiscalYearType="
				+ fiscalYearType + ", categoryId=" + categoryId + ", parentCategoryId=" + parentCategoryId);
		return null;
	}
	
	private void mergeProjectFunding(ProjectFunding projectFunding, Project project) {
		for (us.fed.fs.bao.appinv.data.invest.project.ProjectFundingAmount xmlProjectFundingAmount : xmlProject.getProjectFunding().get(0).getProjectFundingAmount())
		{
			ProjectFundingAmount projectFundingAmount = this.findProjectFundingAmount(projectFunding, 
					xmlProjectFundingAmount.getFiscalYear().getYear(), xmlProjectFundingAmount.getFiscalYearType().value(),
					xmlProjectFundingAmount.getProgramCode().getCode());
			if (projectFundingAmount != null) {
				LoaderUtils.merge(projectFundingAmount, xmlProjectFundingAmount);
			} else {
				projectFundingAmount = projectFunding.createProjectFundingAmount();
				LoaderUtils.copy(projectFundingAmount, xmlProjectFundingAmount);
				projectFundingAmount.setFiscalYear(this.getFiscalYear(xmlProjectFundingAmount.getFiscalYear().getYear()));
				projectFundingAmount.setProgramCode(getProgramCode(xmlProjectFundingAmount.getProgramCode().getCode()));
			}
		}
		
		for (us.fed.fs.bao.appinv.data.invest.project.ProjectFundingMinimumAmount xmlProjectFundingMinimumAmount : xmlProject.getProjectFunding().get(0).getProjectFundingMinimumAmount())
		{
			ProjectFundingMinimumAmount projectFundingMinimumAmount = this.findProjectFundingMinimumAmount(projectFunding, 
					xmlProjectFundingMinimumAmount.getFiscalYear().getYear(), xmlProjectFundingMinimumAmount.getFiscalYearType().value());
			if (projectFundingMinimumAmount != null) {
				LoaderUtils.merge(projectFundingMinimumAmount, xmlProjectFundingMinimumAmount);
			} else {
				projectFundingMinimumAmount = projectFunding.createProjectFundingMinimumAmount();
				LoaderUtils.copy(projectFundingMinimumAmount, xmlProjectFundingMinimumAmount);
				projectFundingMinimumAmount.setFiscalYear(this.getFiscalYear(xmlProjectFundingMinimumAmount.getFiscalYear().getYear()));
			}
		}
	}	
	
	private void mergeProjectSecurity(ProjectSecurity projectSecurity, Project project) {
		for (us.fed.fs.bao.appinv.data.invest.project.SecurityAmount xmlSecurityAmount : xmlProject.getProjectSecurity().get(0).getSecurityAmount())
		{
			SecurityAmount benefitAmount = this.findSecurityAmount(projectSecurity, 
					xmlSecurityAmount.getFiscalYear().getYear(), xmlSecurityAmount.getFiscalYearType().value());
			if (benefitAmount != null) {
				LoaderUtils.merge(benefitAmount, xmlSecurityAmount);
			} else {
				benefitAmount = projectSecurity.createSecurityAmount();
				LoaderUtils.copy(benefitAmount, xmlSecurityAmount);
				benefitAmount.setFiscalYear(this.getFiscalYear(xmlSecurityAmount.getFiscalYear().getYear()));
			}
		}
	}	
	
	private void mergeProjectBenefit(ProjectBenefit projectBenefit, Project project) {
		for (us.fed.fs.bao.appinv.data.invest.project.BenefitAmount xmlBenefitAmount : xmlProject.getProjectBenefit().get(0).getBenefitAmount())
		{
			BenefitAmount benefitAmount = this.findBenefitAmount(projectBenefit, 
					xmlBenefitAmount.getFiscalYear().getYear(), xmlBenefitAmount.getFiscalYearType().value());
			if (benefitAmount != null) {
				LoaderUtils.merge(benefitAmount, xmlBenefitAmount);
			} else {
				benefitAmount = projectBenefit.createBenefitAmount();
				LoaderUtils.copy(benefitAmount, xmlBenefitAmount);
				benefitAmount.setFiscalYear(this.getFiscalYear(xmlBenefitAmount.getFiscalYear().getYear()));
			}
		}
	}	
	
	private void mergeProjectCategorizations(Project project)
	{
		for (us.fed.fs.bao.appinv.data.invest.project.ProjectCategorization xmlProjectCategorization : xmlProject.getProjectElement().getProjectCategorization())
		{
			Category cat = getCategory(xmlProjectCategorization.getCategorization().getCategory());
			ProjectCategorization projectCategorization = findProjectCategorization(project, cat);
			if (projectCategorization != null) {
				 if (xmlProjectCategorization.getCategorization().getCategorizationWeight() != null && xmlProjectCategorization.getCategorization().getCategorizationWeight().size() > 0) {
					 for (us.fed.fs.bao.appinv.data.invest.project.CategorizationWeight xmlCategorizationWeight : xmlProjectCategorization.getCategorization().getCategorizationWeight())
					 {
						 CategorizationWeight categorizationWeight = findCategorizationWeight(projectCategorization, xmlCategorizationWeight.getWeightType().value());
					     if (categorizationWeight != null) {
					    	 LoaderUtils.merge(categorizationWeight, xmlCategorizationWeight);
					     }
					     else {
					    	 categorizationWeight = projectCategorization.getCategorization().createCategorizationWeight();
					    	 LoaderUtils.copy(categorizationWeight, xmlCategorizationWeight);
					     }
				     }
				 }	 
				 if (xmlProjectCategorization.getCategorization().getCategorizationNote() != null && xmlProjectCategorization.getCategorization().getCategorizationNote().size() > 0) {
					 for (us.fed.fs.bao.appinv.data.invest.project.CategorizationNote xmlCategorizationNote : xmlProjectCategorization.getCategorization().getCategorizationNote())
					 {											 
						 CategorizationNote categorizationNote = findCategorizationNote(projectCategorization, xmlCategorizationNote.getNoteType().value());
						 if (categorizationNote != null) {
					    	 LoaderUtils.merge(categorizationNote, xmlCategorizationNote);
					     }
					     else {
					    	 categorizationNote = projectCategorization.getCategorization().createCategorizationNote();
					    	 LoaderUtils.copy(categorizationNote, xmlCategorizationNote);
					     }
					 }
				 }	 
			} else {
				projectCategorization = project.getProjectElement().createProjectCategorization();
				Categorization categorization = projectCategorization.createCategorization();
				categorization.setCategory(cat);
				 if (xmlProjectCategorization.getCategorization().getCategorizationWeight() != null && xmlProjectCategorization.getCategorization().getCategorizationWeight().size() > 0) {
					 for (us.fed.fs.bao.appinv.data.invest.project.CategorizationWeight xmlCategorizationWeight : xmlProjectCategorization.getCategorization().getCategorizationWeight())
					 {
					     CategorizationWeight categorizationWeight = projectCategorization.getCategorization().createCategorizationWeight();
			    	     LoaderUtils.copy(categorizationWeight, xmlCategorizationWeight);
					 }
				 }	 
				 if (xmlProjectCategorization.getCategorization().getCategorizationNote() != null && xmlProjectCategorization.getCategorization().getCategorizationNote().size() > 0) {
					 for (us.fed.fs.bao.appinv.data.invest.project.CategorizationNote xmlCategorizationNote : xmlProjectCategorization.getCategorization().getCategorizationNote())
					 {
					     CategorizationNote categorizationNote = projectCategorization.getCategorization().createCategorizationNote();
			    	     LoaderUtils.copy(categorizationNote, xmlCategorizationNote);
					 }
				 }	 
			}
		}
	}
	
	private ProjectCategorization findProjectCategorization(Project project, Category cat) {
		for (ProjectCategorization projectCategorization : project.getProjectElement().getProjectCategorization()) {
			if (projectCategorization.getCategorization().getCategory().getSeqId() == cat.getSeqId())
				return projectCategorization;
		}
		return null;
	}

	private CategorizationWeight findCategorizationWeight(ProjectCategorization projectCategorization, String weightType) {
		for (CategorizationWeight categorizationWeight : projectCategorization.getCategorization().getCategorizationWeight()) {
			if (categorizationWeight.getWeightType().equals(weightType))
				return categorizationWeight;
		}
		return null;
	}
	
	private CategorizationNote findCategorizationNote(ProjectCategorization projectCategorization, String noteType) {
		for (CategorizationNote categorizationNote : projectCategorization.getCategorization().getCategorizationNote()) {
			if (categorizationNote.getNoteType().equals(noteType))
				return categorizationNote;
		}
		return null;
	}
	
	/**
	 * Searches the given project for a cost that matches the given arguments.
	 * The parent categorization rather than the "leaf" categorization is used
	 * to search because we expect the leaf categorization may have changed, while
	 * we expect the parent categorization to remain the same.
	 * @param projectCost the project cost collection
	 * @param lifecycleCostType the 'SS' or 'DME' type
	 * @param year the cost fiscal year
	 * @param yearType the year type
	 * @param costParentCat the parent category
	 * @return the cost or null if not found
	 */
	private Cost findCost(ProjectCost projectCost, String lifecycleCostType, int year, String yearType,
			Category costCat) {
		if (projectCost.getProjectLifecycleCost() != null)
			for (ProjectLifecycleCost plc : projectCost.getProjectLifecycleCost()) {
				if (!plc.getCostType().equals(lifecycleCostType))
					continue;
				
				if (plc.getFiscalYearCost() != null)
					for (FiscalYearCost fyc : plc.getFiscalYearCost()) {
						if (fyc.getFiscalYear() == null) {
							log.warn("WTF fiscal-year is null: 1 " + lifecycleCostType + ", " + year + ", " + yearType);
							continue;
						}
						if (fyc.getFiscalYear().getYear() != year)
						    continue;
						if (!fyc.getFiscalYearType().equals(yearType))
						    continue;
						if (fyc.getCost() != null)
							for (Cost cost : fyc.getCost()) {
								for (CostCategorization costCatz : cost.getCostCategorization()) {
									if (costCatz.getCategorization().getCategory().getSeqId() == costCat.getSeqId())
										return cost;
								}
							}
					}
			}
		return null;
	}

	private FiscalYearCost findFiscalYearCost(ProjectCost projectCost, String lifecycleCostType, int year, String yearType) {
		for (ProjectLifecycleCost plc : projectCost.getProjectLifecycleCost()) {
			if (!plc.getCostType().equals(lifecycleCostType))
				continue;
			for (FiscalYearCost fyc : plc.getFiscalYearCost()) {
				if (fyc.getFiscalYear() == null) {
					log.warn("WTF fiscal-year is null: 1 " + lifecycleCostType + ", " + year + ", " + yearType);
					continue;
				}
				if (fyc.getFiscalYear().getYear() != year)
				    continue;
				if (fyc.getFiscalYearType().equals(yearType))
				    return fyc;
			}
		}
		return null;
	}	

	private ProjectLifecycleCost findProjectLifecycleCost(ProjectCost projectCost, String lifecycleCostType) {
		for (ProjectLifecycleCost plc : projectCost.getProjectLifecycleCost()) {
			if (plc.getCostType().equals(lifecycleCostType))
				return plc;
		}
		return null;
	}	

	private BenefitAmount findBenefitAmount(ProjectBenefit projectBenefit, int year, String yearType) {
		for (BenefitAmount benefitAmount : projectBenefit.getBenefitAmount()) {
			if (benefitAmount.getFiscalYear().getYear() == year &&
					benefitAmount.getFiscalYearType().equals(yearType))
			{
				return benefitAmount;
			}
		}
		return null;
	}

	private ProjectFundingAmount findProjectFundingAmount(ProjectFunding projectFunding, int year, String yearType, 
			String fundCode) {
		if (projectFunding != null && projectFunding.getProjectFundingAmount() != null)
			for (ProjectFundingAmount projectFundingAmount : projectFunding.getProjectFundingAmount()) {
				if (projectFundingAmount.getFiscalYear().getYear() == year &&
						projectFundingAmount.getFiscalYearType().equals(yearType) &&
						projectFundingAmount.getProgramCode().getCode().equals(fundCode))
				{
					return projectFundingAmount;
				}
			}
		return null;
	}
	
	private ProjectFundingMinimumAmount findProjectFundingMinimumAmount(ProjectFunding projectFunding, int year, String yearType) {
		if (projectFunding != null && projectFunding.getProjectFundingMinimumAmount() != null)
			for (ProjectFundingMinimumAmount projectFundingMinimumAmount : projectFunding.getProjectFundingMinimumAmount()) {
				if (projectFundingMinimumAmount.getFiscalYear().getYear() == year &&
						projectFundingMinimumAmount.getFiscalYearType().equals(yearType))
				{
					return projectFundingMinimumAmount;
				}
			}
		return null;
	}
	
	private SecurityAmount findSecurityAmount(ProjectSecurity projectSecurity, int year, String yearType) {
		for (SecurityAmount securityAmount : projectSecurity.getSecurityAmount()) {
			if (securityAmount.getFiscalYear().getYear() == year &&
					securityAmount.getFiscalYearType().equals(yearType))
			{
				return securityAmount;
			}
		}
		return null;
	}
	
	private void createProjectCosts(Project project)
	{
		ProjectCost projectCost = project.createProjectCost();
		for (us.fed.fs.bao.appinv.data.invest.project.IRProjectLifecycleCost xmlPlc : xmlProject.getIRProjectCost().get(0).getIRProjectLifecycleCost())
		{
			ProjectLifecycleCost plc = projectCost.createProjectLifecycleCost();
			LoaderUtils.copy(plc, xmlPlc);
			for (us.fed.fs.bao.appinv.data.invest.project.FiscalYearCost xmlFyc : xmlPlc.getFiscalYearCost()) {
				FiscalYearCost fyc = plc.createFiscalYearCost();
				fyc.setFiscalYear(getFiscalYear(xmlFyc.getFiscalYear().getYear()));
				LoaderUtils.copy(fyc, xmlFyc);
				for (us.fed.fs.bao.appinv.data.invest.project.Cost xmlCost : xmlFyc.getCost()) {
					Cost cost = fyc.createCost();
					LoaderUtils.copy(cost, xmlCost);
					for (us.fed.fs.bao.appinv.data.invest.project.CostCategory xmlCostCat : xmlCost.getCostCategory()) {
						CostCategorization costCat = cost.createCostCategorization();
						Categorization catz = costCat.createCategorization();
						catz.setCategory(getCategory(xmlCostCat.getCategory()));
					}
				}
			}
		}		
	}
	
	private void createProjectCategorizations(Project project)
	{
		for (us.fed.fs.bao.appinv.data.invest.project.ProjectCategorization xmlProjCatz : xmlProject.getProjectElement().getProjectCategorization()) {
			ProjectCategorization projCatz = project.getProjectElement().createProjectCategorization();
			Categorization catz = projCatz.createCategorization();
			catz.setCategory(getCategory(xmlProjCatz.getCategorization().getCategory()));
			LoaderUtils.copy(catz, xmlProjCatz.getCategorization());
			if (xmlProjCatz.getCategorization().getCategorizationNote() != null) {
				for (us.fed.fs.bao.appinv.data.invest.project.CategorizationNote xmlCatzNote : xmlProjCatz.getCategorization().getCategorizationNote()) {
				    CategorizationNote catzNote = catz.createCategorizationNote();
				    LoaderUtils.copy(catzNote, xmlCatzNote);
				}
			}
			if (xmlProjCatz.getCategorization().getCategorizationWeight() != null) {
				for (us.fed.fs.bao.appinv.data.invest.project.CategorizationWeight xmlCatzWeight : xmlProjCatz.getCategorization().getCategorizationWeight()) {
				    CategorizationWeight catzWeight = catz.createCategorizationWeight();
				    LoaderUtils.copy(catzWeight, xmlCatzWeight);
				}
			}			
		}		
	}
	
	private void createProjectBusinessCases(Project project)
	{
		for (us.fed.fs.bao.appinv.data.invest.project.BusinessCase xmlBusinessCase : xmlProject.getBusinessCase()) {
			if (xmlBusinessCase.getDescription() == null || xmlBusinessCase.getDescription().trim().length() == 0)
				continue; // getting strange JDBC/SQL errors with null/empty CLOB column inserts - this is a hack 
			BusinessCase businessCase = project.createBusinessCase();
			LoaderUtils.copy(businessCase, xmlBusinessCase);
		}		
	}	
		
	private void createProjectFunding(Project project)
	{
		if (xmlProject.getProjectFunding() != null && xmlProject.getProjectFunding().size() > 0) {
			ProjectFunding projectFunding = project.createProjectFunding();
			LoaderUtils.copy(projectFunding, xmlProject.getProjectFunding().get(0));
			for (us.fed.fs.bao.appinv.data.invest.project.ProjectFundingAmount xmlProjectFundingAmount : xmlProject.getProjectFunding().get(0).getProjectFundingAmount())
			{
				ProjectFundingAmount projectFundingAmount = projectFunding.createProjectFundingAmount();
				LoaderUtils.copy(projectFundingAmount, xmlProjectFundingAmount);
				projectFundingAmount.setFiscalYear(getFiscalYear(xmlProjectFundingAmount.getFiscalYear().getYear()));
				projectFundingAmount.setProgramCode(getProgramCode(xmlProjectFundingAmount.getProgramCode().getCode()));
			}
			
			for (us.fed.fs.bao.appinv.data.invest.project.ProjectFundingMinimumAmount xmlProjectFundingMinimumAmount : xmlProject.getProjectFunding().get(0).getProjectFundingMinimumAmount())
			{
				ProjectFundingMinimumAmount projectFundingMinimumAmount = projectFunding.createProjectFundingMinimumAmount();
				LoaderUtils.copy(projectFundingMinimumAmount, xmlProjectFundingMinimumAmount);			
				projectFundingMinimumAmount.setFiscalYear(getFiscalYear(xmlProjectFundingMinimumAmount.getFiscalYear().getYear()));
			}
		}
	}
	
	private void createProjectSecurity(Project project)
	{
		if (xmlProject.getProjectSecurity() != null && xmlProject.getProjectSecurity().size() > 0) {
			ProjectSecurity projectSecurity = project.createProjectSecurity();
			LoaderUtils.copy(projectSecurity, xmlProject.getProjectSecurity().get(0));
			for (us.fed.fs.bao.appinv.data.invest.project.SecurityAmount xmlProjectSecurityAmount : xmlProject.getProjectSecurity().get(0).getSecurityAmount())
			{
				SecurityAmount projectSecurityAmount = projectSecurity.createSecurityAmount();
				LoaderUtils.copy(projectSecurityAmount, xmlProjectSecurityAmount);
				projectSecurityAmount.setFiscalYear(getFiscalYear(xmlProjectSecurityAmount.getFiscalYear().getYear()));
			}
		}
	}

	private void createProjectBenefit(Project project)
	{
		if (xmlProject.getProjectBenefit() != null && xmlProject.getProjectBenefit().size() > 0) {
			ProjectBenefit projectBenefit = project.createProjectBenefit();
			LoaderUtils.copy(projectBenefit, xmlProject.getProjectBenefit().get(0));
			for (us.fed.fs.bao.appinv.data.invest.project.BenefitAmount xmlProjectBenefitAmount : xmlProject.getProjectBenefit().get(0).getBenefitAmount())
			{
				BenefitAmount projectBenefitAmount = projectBenefit.createBenefitAmount();
				LoaderUtils.copy(projectBenefitAmount, xmlProjectBenefitAmount);
				projectBenefitAmount.setFiscalYear(getFiscalYear(xmlProjectBenefitAmount.getFiscalYear().getYear()));
			}
		}
	}
		
	private void createProjectDeliverables(ProjectPlan projectPlan, Project project)
	{
	    for (us.fed.fs.bao.appinv.data.invest.project.Deliverable xmlDeliv : xmlProject.getProjectPlan().get(0).getDeliverable())
	    {
	    	Deliverable deliverable = projectPlan.createDeliverable();
	    	deliverable.createProjectElement();
	    	LoaderUtils.copy(deliverable, xmlDeliv);
	    	//deliverable.setDeliverableType(value)
	    	FiscalQuarter fq = getFiscalQuarter(xmlDeliv.getFiscalQuarter().getFiscalYear().getYear(), 
	    			xmlDeliv.getFiscalQuarter().getQuarter().value());
	    	deliverable.setPlannedCompletionDate(fq.getEndDate());
	    	DeliverableComponent dc = deliverable.createDeliverableComponent();
	    	dc.setComponentType(DeliverableComponentType.DESIGN.getInstanceName());
	    	dc = deliverable.createDeliverableComponent();
	    	dc.setComponentType(DeliverableComponentType.DOCUMENT.getInstanceName());
	    	deliverable.setTargetCustomerEntities("system generated");
	    }		
	}
	
	private void createProjectMilestones(ProjectPlan projectPlan, Project project)
	{
	    for (us.fed.fs.bao.appinv.data.invest.project.Milestone xmlMilestone : xmlProject.getProjectPlan().get(0).getMilestone())
	    {
	    	Milestone milestone = projectPlan.createMilestone();
	    	milestone.createProjectElement();
	    	LoaderUtils.copy(milestone, xmlMilestone);
	    	FiscalQuarter fq = getFiscalQuarter(xmlMilestone.getFiscalQuarter().getFiscalYear().getYear(), 
	    			xmlMilestone.getFiscalQuarter().getQuarter().value());
	    	milestone.setMilestoneDate(fq.getEndDate());
	    }		
	}
	
	private Investment getInvestment() {
		DataGraph[] results = service.find(InvestmentQuery.createQuery(xmlProject));
		Investment result = (Investment)results[0].getRootObject();
		((PlasmaDataObject)result).setDataGraph(null); // so we can re-link it
		return result;
	}
	
	private Application getApplication() {
		DataGraph[] results = service.find(ApplicationQuery.createQuery(xmlProject));
		Application result = (Application)results[0].getRootObject();
		((PlasmaDataObject)result).setDataGraph(null); // so we can re-link it
		return result;
	}
	
	private SegmentName getSegmentName() {
		DataGraph[] results = service.find(SegmentNameQuery.createQuery(xmlProject));
		SegmentName result = (SegmentName)results[0].getRootObject();
		((PlasmaDataObject)result).setDataGraph(null); // so we can re-link it
		return result;
	}

	private Organization getSponsorOrganization() {
		DataGraph[] results = service.find(OrganizationQuery.createSponsorQuery(xmlProject));
		Organization result = (Organization)results[0].getRootObject();
		((PlasmaDataObject)result).setDataGraph(null); // so we can re-link it
		return result;
	}

	private FiscalYear getBudgetFiscalYear() {
		DataGraph[] results = service.find(FiscalYearQuery.createBudgetYearQuery(xmlProject));
		FiscalYear result = (FiscalYear)results[0].getRootObject();
		((PlasmaDataObject)result).setDataGraph(null); // so we can re-link it
		return result;
	}
	
	private FiscalYear getFiscalYear(int year) {
		DataGraph[] results = service.find(FiscalYearQuery.createQuery(year));
		FiscalYear result = (FiscalYear)results[0].getRootObject();
		((PlasmaDataObject)result).setDataGraph(null); // so we can re-link it
		return result;
	}

	private FiscalQuarter getFiscalQuarter(int year, String quarter) {
		DataGraph[] results = service.find(FiscalQuarterQuery.createQuery(year, quarter));
		FiscalQuarter result = (FiscalQuarter)results[0].getRootObject();
		((PlasmaDataObject)result).setDataGraph(null); // so we can re-link it
		return result;
	}
	
	private Category getCategory(us.fed.fs.bao.appinv.data.invest.project.Category xmlCat) {
		DataGraph[] results = service.find(CategoryQuery.createQuery(xmlCat));
		Category result = (Category)results[0].getRootObject();
		((PlasmaDataObject)result).setDataGraph(null); // so we can re-link it
		return result;
	}
	
	private Category getCategory(String name, int id) {
		DataGraph[] results = service.find(CategoryQuery.createQuery(name, id));
		Category result = (Category)results[0].getRootObject();
		((PlasmaDataObject)result).setDataGraph(null); // so we can re-link it
		return result;
	}

	private ProgramCode getProgramCode(String code) {
		DataGraph[] results = service.find(ProgramCodeQuery.createQuery(code));
		ProgramCode result = (ProgramCode)results[0].getRootObject();
		((PlasmaDataObject)result).setDataGraph(null); // so we can re-link it
		return result;
	}


	protected void marshalQuery(Query query) {
        try {
            PlasmaQueryDataBinding binding = new PlasmaQueryDataBinding(
                    new DefaultValidationEventHandler());
            log.info("marshaling query");
            String xml = binding.marshal(query);
            log.info(xml);
        } catch (JAXBException e) {
            log.error(e.getMessage(), e);
        } catch (SAXException e) {
            log.error(e.getMessage(), e);
        }catch (Exception e) {
            log.error(e.getMessage(), e);
        }        		
	}

	protected Project findProject(Query query) {
		DataGraph[] result = service.find(query);
		if (result == null || result.length == 0)
			return null;
		if (result.length > 1)
			throw new IllegalArgumentException("found multiple projects");
		return (Project)result[0].getRootObject();
	}

	protected us.fed.fs.bao.appinv.data.invest.project.IRProject unmarshal(File file) {
		us.fed.fs.bao.appinv.data.invest.project.IRProject project;
        InputStream xmlis;
		try {
			xmlis = new FileInputStream(file);
		} catch (FileNotFoundException e1) {
			throw new IllegalArgumentException(e1);
		}
        ProjectDataBinding binding;
        try {
			binding = new ProjectDataBinding();
			JAXBElement<?> elem = (JAXBElement<?>) binding.unmarshal(xmlis);
			project = (us.fed.fs.bao.appinv.data.invest.project.IRProject)elem.getValue();
		} catch (UnmarshalException e) {
			throw new RuntimeException(e);
		} catch (JAXBException e) {
			throw new RuntimeException(e);
		} catch (SAXException e) {
			throw new RuntimeException(e);
		}
		return project;
	}
}
